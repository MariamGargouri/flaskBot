from flask import Flask, request, jsonify
import sqlite3
import os
import logging
import requests # Importation pour les requ√™tes HTTP √† l'API Gemini

app = Flask(__name__)
DATABASE_PATH = "ma_base1.sqlite"

# Configuration de base pour le logging
logging.basicConfig(level=logging.INFO)

# Variable globale pour stocker le sch√©ma pars√© de la base de donn√©es
table_header_schema_global = None

def parse_metadata_sql(metadata_file="metadata.sql"):
    """
    Parse le fichier metadata.sql pour extraire les informations de table et de colonne.
    Ce sch√©ma sera envoy√© √† l'API Gemini.
    """
    try:
        with open(metadata_file, "r") as f:
            content = f.read()
        if not content.strip(): # Ajout d'une v√©rification si le fichier est vide apr√®s lecture
            logging.warning(f"Le fichier {metadata_file} est vide ou ne contient que des espaces blancs.")
            return ""
        logging.info("Sch√©ma de la base de donn√©es pars√© avec succ√®s depuis metadata.sql.")
        return content
    except FileNotFoundError:
        logging.error(f"metadata.sql non trouv√© √† {metadata_file}. Assurez-vous que le fichier existe et est accessible.")
        return ""
    except Exception as e:
        logging.error(f"Erreur lors de l'analyse de metadata.sql: {e}", exc_info=True)
        return ""

# --- D√âPLACER L'INITIALISATION ICI ---
# Parse metadata.sql une seule fois au d√©marrage du module, quel que soit le mode d'ex√©cution.
table_header_schema_global = parse_metadata_sql()
if not table_header_schema_global:
    logging.error("√âchec du chargement du sch√©ma de la base de donn√©es au d√©marrage. L'API Gemini ne pourra pas g√©n√©rer de SQL.")
# --- FIN DU D√âPLACEMENT ---


def call_gemini_api(question, table_metadata_string):
    """
    Appelle l'API Gemini pour g√©n√©rer une requ√™te SQL √† partir de la question
    et des m√©tadonn√©es de la table.
    """
    api_key = os.environ.get('GOOGLE_API_KEY')
    if not api_key:
        logging.error("GOOGLE_API_KEY n'est pas d√©finie dans les variables d'environnement.")
        return None

    # Utilisez le mod√®le 'gemini-1.5-flash' pour une bonne performance et un co√ªt potentiellement plus faible
    # L'URL de l'API Gemini pour la g√©n√©ration de contenu
    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={api_key}"

    # Construisez le prompt pour Gemini.
    # Il est crucial de donner des instructions claires et le sch√©ma de la base de donn√©es.
    prompt_text = f"""
    You are a powerful text-to-SQL model. Your task is to translate a user question into a SQL query, given the database schema.
    You must output ONLY the SQL query, and nothing else. Do not include any explanations, comments, or additional text.

    ### Instructions:
    - Generate a SQL query that directly answers the user's question.
    - Use the provided table metadata to understand the database schema.
    - Ensure the generated SQL is syntactically correct for SQLite.

    ### User Question:
    {question}

    ### Table Metadata:
    {table_metadata_string}

    ### SQL Query:
    """

    headers = {
        'Content-Type': 'application/json',
    }
    payload = {
        "contents": [
            {
                "role": "user",
                "parts": [
                    {"text": prompt_text}
                ]
            }
        ],
        # Vous pouvez ajouter des param√®tres de g√©n√©ration ici si n√©cessaire, par exemple:
        # "generationConfig": {
        #     "temperature": 0.1, # Temp√©rature basse pour des r√©sultats d√©terministes
        #     "maxOutputTokens": 500 # Limite la longueur de la r√©ponse
        # }
    }

    logging.info("Envoi de la requ√™te √† l'API Gemini...")
    try:
        response = requests.post(api_url, headers=headers, json=payload, timeout=30) # Ajout d'un timeout
        response.raise_for_status() # L√®ve une exception pour les codes d'√©tat HTTP 4xx/5xx (ex: 400, 401, 403, 429)
        
        json_response = response.json()
        logging.info(f"R√©ponse brute de l'API Gemini: {json_response}")
        
        # Extrait le texte g√©n√©r√© par Gemini
        if json_response and json_response.get('candidates') and len(json_response['candidates']) > 0:
            generated_text = json_response['candidates'][0]['content']['parts'][0]['text']
            # Nettoyez la sortie si Gemini inclut des backticks (```sql) ou d'autres textes non SQL
            # Ceci est tr√®s important car Gemini peut √™tre "bavard"
            sql_query = generated_text.split("```sql")[-1].split("```")[0].strip()
            # Si le mod√®le ne met pas de backticks, assurez-vous de ne pas couper la requ√™te
            if not sql_query: # Si le split a √©chou√©, prenez tout le texte g√©n√©r√©
                sql_query = generated_text.strip()

            logging.info(f"Requ√™te SQL g√©n√©r√©e par Gemini (nettoy√©e): {sql_query}")
            return sql_query
        else:
            logging.warning(f"R√©ponse inattendue de l'API Gemini (pas de candidats ou de contenu): {json_response}")
            return None

    except requests.exceptions.Timeout:
        logging.error("La requ√™te √† l'API Gemini a expir√©.")
        return None
    except requests.exceptions.RequestException as e:
        logging.error(f"Erreur lors de l'appel √† l'API Gemini: {e}", exc_info=True)
        return None
    except Exception as e:
        logging.error(f"Erreur inattendue lors du traitement de la r√©ponse Gemini: {e}", exc_info=True)
        return None

# --- Fonctions existantes de l'API Flask ---
def is_sql_question(question):
    """
    D√©termine si une question est susceptible d'√™tre une question SQL
    en fonction de mots-cl√©s pr√©d√©finis.
    """
    keywords = ["nombre", "liste", "combien", "afficher", "clients", "√¢ge", "sexe", "magasins","superieur", "inf√©rieur","√©gale","facture","vente","email","facture","total","num tel","compteur","prefix",
    "suppix","avoirachat", "avoirvente","transfert","payment","paymentmode", "sale","espece","cheque","carte bancaire","cnam","assurance","pass cadeau","privilege","produit","archived","created","updated","marge","marque","prix","quantite",
    "reference","barcode","coloration","description","matiere","fournisseur",]
    return any(word.lower() in question.lower() for word in keywords)

def execute_sql(sql):
    """
    Ex√©cute une requ√™te SQL sur la base de donn√©es SQLite.
    """
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        conn.row_factory = sqlite3.Row # Permet d'acc√©der aux colonnes par leur nom
        cur = conn.cursor()
        cur.execute(sql)
        rows = cur.fetchall()
        conn.close()
        return [dict(row) for row in rows] # Convertit les lignes en dictionnaires
    except Exception as e:
        logging.error(f"Erreur SQL lors de l'ex√©cution de la requ√™te: {e}")
        return f"Erreur SQL : {e}"

@app.route("/ask", methods=["POST"])
def ask():
    """
    Point d'entr√©e de l'API pour les questions.
    D√©tecte si la question est SQL et g√©n√®re/ex√©cute le SQL si c'est le cas.
    """
    question = request.json.get("question", "")
    logging.info(f"Requ√™te re√ßue pour la question: '{question}'")

    if is_sql_question(question):
        # R√©cup√©rez le sch√©ma de la base de donn√©es (d√©j√† pars√© au d√©marrage)
        if not table_header_schema_global:
            logging.error("Sch√©ma de base de donn√©es non disponible. Impossible de g√©n√©rer SQL.")
            return jsonify({"type": "sql", "sql": None, "result": "‚ùå Sch√©ma de base de donn√©es non charg√©."})
            
        # Utilise la fonction pour appeler Gemini
        sql = call_gemini_api(question, table_header_schema_global)

        if sql: # Cette ligne est correctement indent√©e.
            result = execute_sql(sql)
            logging.info(f"SQL ex√©cut√©, r√©sultat: {result}")
        else:
            result = "‚ùå Requ√™te non g√©n√©r√©e par Gemini."
            logging.warning("La g√©n√©ration SQL par Gemini a √©chou√©.")
        
        return jsonify({
            "type": "sql",
            "sql": sql,
            "result": result
        })
    else:
        logging.info(f"Question non SQL d√©tect√©e: '{question}'")
        return jsonify({
            "type": "general",
            "response": f"ü§ñ Je suis un chatbot g√©n√©ral. Voici une r√©ponse g√©n√©rique √† votre question : {question}"
        })

if __name__ == "__main__":
    # Ce bloc n'est plus n√©cessaire pour initialiser table_header_schema_global
    # car cela est fait au niveau du module.
    # Il est conserv√© pour l'ex√©cution locale si debug=True.
    app.run(debug=True)

